import ctypes
import os
import logging
import time

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á plcommpro.dll
DLL_PATH = os.path.join(os.getcwd(), "plcommpro.dll")
if not os.path.exists(DLL_PATH):
    raise FileNotFoundError(f"Cannot find the DLL file at: {DLL_PATH}")

# ‡πÇ‡∏´‡∏•‡∏î DLL
try:
    plcommpro = ctypes.CDLL(DLL_PATH)
except Exception as e:
    raise RuntimeError(f"Failed to load DLL: {e}")

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô DLL
plcommpro.Connect.argtypes = [ctypes.c_char_p]
plcommpro.Connect.restype = ctypes.c_void_p

plcommpro.GetRTLogExt.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int]
plcommpro.GetRTLogExt.restype = ctypes.c_int

plcommpro.Disconnect.argtypes = [ctypes.c_void_p]
plcommpro.Disconnect.restype = ctypes.c_int

plcommpro.ControlDevice.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_long, ctypes.c_long, ctypes.c_long, ctypes.c_long, ctypes.c_char_p]
plcommpro.ControlDevice.restype = ctypes.c_int

def connect_device(connection_params):
    """ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå """
    logging.info("üîå Connecting to the device...")
    handle = plcommpro.Connect(connection_params.encode('utf-8'))
    if handle:
        logging.info("‚úÖ Device connected successfully.")
        return handle
    else:
        logging.error("‚ùå Failed to connect to the device. Please check the connection parameters.")
        return None

def disconnect_device(handle):
    """ ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå """
    try:
        result = plcommpro.Disconnect(handle)
        if result == 0:
            logging.info("üîå Disconnected successfully.")
        else:
            logging.error("‚ùå Failed to disconnect.")
    except Exception as e:
        logging.error(f"Error during disconnecting: {e}")

def check_connection(handle):
    """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå """
    buffer = ctypes.create_string_buffer(64)
    result = plcommpro.GetDeviceParam(handle, buffer, 64, b"IPAddress")
    return result >= 0  # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤ >= 0 ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏¢‡∏±‡∏á‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå

def reconnect_device(connection_params, max_retries=5):
    """ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î max_retries ‡∏Ñ‡∏£‡∏±‡πâ‡∏á """
    for attempt in range(1, max_retries + 1):
        logging.info(f"üîÑ Reconnecting... Attempt {attempt}/{max_retries}")
        handle = connect_device(connection_params)
        if handle:
            return handle
        time.sleep(5)  # ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    logging.error("‚ùå Failed to reconnect after multiple attempts.")
    return None

def open_door(handle, door_id):
    """ ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ï‡∏≤‡∏° ID ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î """
    try:
        operation_id = 1  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π
        param1 = door_id
        param2 = 1  # Lock Output
        param3 = 1  # ‡πÄ‡∏õ‡∏¥‡∏î 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        result = plcommpro.ControlDevice(handle, operation_id, param1, param2, param3, 0, "".encode('utf-8'))
        if result == 0:
            logging.info(f"üö™ Door {door_id} opened successfully.")
        else:
            logging.error(f"‚ùå Failed to open door {door_id}. Error code: {result}")
    except Exception as e:
        logging.error(f"Error opening door {door_id}: {e}")

def parse_rtlog_ext(log_data):
    """ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å GetRTLogExt ‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ """
    logs = log_data.strip().split("\r\n")
    parsed_logs = []

    for log in logs:
        fields = log.split("\t")
        log_dict = {}
        for field in fields:
            key_value = field.split("=")
            if len(key_value) == 2:
                log_dict[key_value[0]] = key_value[1]
        
        parsed_logs.append(log_dict)
    
    return parsed_logs

def monitor_real_time_logs(handle, target_card_numbers, connection_params):
    """ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå‡∏à‡∏≤‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå """
    buffer_size = 64 * 1024
    buffer = ctypes.create_string_buffer(buffer_size)

    logging.info("üì° Monitoring real-time logs... Press Ctrl+C to stop.")
    
    try:
        while True:
            if not check_connection(handle):
                logging.warning("‚ö†Ô∏è Connection lost! Trying to reconnect...")
                handle = reconnect_device(connection_params)
                if not handle:
                    break  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î

            result = plcommpro.GetRTLogExt(handle, buffer, buffer_size)
            if result > 0:
                log_data = buffer.value.decode('utf-8').strip()
                event_logs = parse_rtlog_ext(log_data)

                for event in event_logs:
                    if event.get("pin") == "0":
                        continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

                    logging.info(f"üìç Event detected: {event}")

                    if event["pin"] in target_card_numbers:
                        logging.info(f"üéØ Target card detected: {event['pin']}. Processing door operation...")

                        try:
                            if event["verifytype"] == "1":
                                open_door(handle, door_id=1)  # ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π 1
                            elif event["verifytype"] == "2":
                                open_door(handle, door_id=2)  # ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π 2
                            else:
                                logging.warning(f"Unknown verify type: {event['verifytype']}. No door opened.")
                        except Exception as e:
                            logging.error(f"Error processing door operation: {e}")

                        time.sleep(0.1)  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 0.1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            elif result == 0:
                logging.info("‚ö†Ô∏è No new events.")
                time.sleep(0.5)
            else:
                logging.error(f"‚ùå Error fetching real-time logs. Code: {result}")
                break
    except KeyboardInterrupt:
        logging.info("‚èπÔ∏è Monitoring stopped by user.")
    finally:
        logging.info("üîå Real-time monitoring ended.")

if __name__ == "__main__":
    ip_address = "192.168.1.222"
    port = "14370"
    password = ""

    connection_params = f"protocol=TCP,ipaddress={ip_address},port={port},timeout=2000,passwd={password}"

    target_card_numbers = ["51392", "1111", "7668839", "7668835"]

    device_handle = connect_device(connection_params)
    if device_handle:
        try:
            monitor_real_time_logs(device_handle, target_card_numbers, connection_params)
        finally:
            disconnect_device(device_handle)
            logging.info("üîå Device disconnected.")
