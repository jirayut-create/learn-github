from ctypes import cdll, c_char_p, c_long, c_void_p
import os

# ‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå plcommpro.dll
dll_path = r"C:\dev-zkaccess\Pull_SDK\plcommpro.dll"

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå DLL ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if not os.path.exists(dll_path):
    print(f"‚ùå Error: File not found - {dll_path}")
else:
    try:
        # ‡πÇ‡∏´‡∏•‡∏î DLL
        zkemkeeper = cdll.LoadLibrary(dll_path)

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        parameters = "protocol=TCP,ipaddress=192.168.1.222,port=14370,timeout=5000,passwd="
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Connect()
        zkemkeeper.Connect.argtypes = [c_char_p]
        zkemkeeper.Connect.restype = c_void_p  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô pointer
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
        connection_handle = zkemkeeper.Connect(parameters.encode('utf-8'))

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ handle
        if not connection_handle or connection_handle == 0:
            print("‚ùå Connection handle is invalid!")
            exit()
        else:
            print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! Connection handle: {connection_handle}")

            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á ControlDevice()
            zkemkeeper.ControlDevice.argtypes = [c_void_p, c_long, c_long, c_long, c_long, c_long, c_char_p]
            zkemkeeper.ControlDevice.restype = c_long  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô int
            
            # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ó‡∏µ‡πà 1 ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            door_id = 2
            operation_id = 1  # 1 = ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Ñ
            output_type = 1  # 1 = ‡∏•‡πá‡∏≠‡∏Ñ
            open_time = 2  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            reserved = 0  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ
            options = c_char_p(b"")  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÉ‡∏ä‡πâ string ‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ó‡∏ô None
            
            # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            print(f"üîç Params: OperationID={operation_id}, DoorID={door_id}, OutputType={output_type}, OpenTime={open_time}")

            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π
            result = zkemkeeper.ControlDevice(connection_handle, operation_id, door_id, output_type, open_time, reserved, options)
            
            if result >= 0:
                print(f"üö™‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π {door_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            else:
                print(f"üö™‚ùå ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π {door_id} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß! Error Code: {result}")

            # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            # zkemkeeper.Disconnect.argtypes = [c_void_p]
            # zkemkeeper.Disconnect(connection_handle)
             # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
            connection_handle = zkemkeeper.Connect(parameters.encode('utf-8'))

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
